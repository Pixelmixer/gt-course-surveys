
functions:
  - isLoggedIn():       auth.uid !== null
  - isCurrentUser(id):  auth.uid === id
  - undeletable():      next.exists()
  - userExists(id):     root.users[id].exists()
  - semesterExists(id): root.semesters[id].exists()
  - courseExists(id):   root.courses[id].exists()

schema:
  type: object
  additionalProperties: false
  properties:

    ################

    users:
      type: object
      $userId:
        type: object
        additionalProperties: false
        required: [ created, authProvider, name, profileImageUrl, anonymous ]
        constraint: undeletable()
        properties:
          created:          {type: string}
          authProvider:     {type: string, enum: [ password, google, facebook, twitter, github ]}
          name:             {type: string}
          profileImageUrl:  {type: string}
          email:            {type: string}
          anonymous:        {type: boolean}
          specialization:   {type: number, minimum: 0, maximum: 3}
        examples:
          - { created: "2015-11-13T09:06:23-06:00", authProvider: 'password', email: "bajin.mehmet@gmail.com", name: "Mehmet Bajin", profileImageUrl: "http://", anonymous: true, specialization: 1 }

    ################

    reviews:
      type: object
      $reviewId:
        type: object
        additionalProperties: false
        required: [ created, updated, author, semester, course, difficulty, workload, comments ]
        properties:
          created:    {type: string}
          updated:    {type: string}
          author:     {type: string, constraint: userExists(next) && isCurrentUser(next)}
          semester:   {type: string, constraint: semesterExists(next)}
          course:     {type: string, constraint: courseExists(next)}
          difficulty: {type: number, minimum: 1, maximum: 5}
          workload:   {type: number, minimum: 1}
          rating:     {type: number, minimum: 1, maximum: 5}
          comments:   {type: string}
        examples:
          - { created: "2015-11-05T00:00:00-06:00", updated: "2015-11-05T00:00:00-06:00", author: "c36c1a3f-6655-4f31-b0a4-971fdc87fbe6", semester: "2014-3", course: "6505", difficulty: 5, workload: 15, rating: 1, comments: "I dropped it this semester to take it by itself." }

    ################

    courses:
      type: object
      $courseId:
        type: object
        additionalProperties: false
        required: [ department, foundational, name, number, url ]
        properties:
          department:   {type: string, enum: [ CS, CSE ]}
          foundational: {type: boolean}
          name:         {type: string}
          number:       {type: number, minimum: 6000 }
          url:          {type: string}
        examples:
          - { department: "CS", foundational: true, name: "Software Development Process", number: 6300, url: "http://www.omscs.gatech.edu/cs-6300-software-development-process" }

    ################

    semesters:
      type: object
      $semesterId:
        type: object
        additionalProperties: false
        required: [ season, year ]
        properties:
          season: {type: number, minimum: 0, maximum: 3}
          year:   {type: number, minimum: 0}
        examples:
          - { season: 3, year: 2015 }

    ################

    grades:
      type: object
      $courseId:
        type: object
        additionalProperties: false
        required: [ a, b, c, d, f, i, s, u, v, w, total ]
        properties:
          a:      {type: number, minimum: 0}
          b:      {type: number, minimum: 0}
          c:      {type: number, minimum: 0}
          d:      {type: number, minimum: 0}
          f:      {type: number, minimum: 0}
          i:      {type: number, minimum: 0}
          s:      {type: number, minimum: 0}
          u:      {type: number, minimum: 0}
          v:      {type: number, minimum: 0}
          w:      {type: number, minimum: 0}
          total:  {type: number, minimum: 0}
        examples:
          - { a: 39, b: 3, c: 0, d: 0, f: 0, i: 0, s: 0, u: 0, v: 1, w: 1, total: 44 }

access:
  - location: /users/
    read:     isLoggedIn()
  - location: /users/$userId
    write:    isLoggedIn() && isCurrentUser($userId)

  - location: /reviews
    read:     true
  - location: /reviews/$reviewId
    write:    isLoggedIn()

  # static data maintained by admin
  - location: /courses/
    read:     true
    write:    false
  - location: /semesters/
    read:     true
    write:    false
  - location: /grades/
    read:     true
    write:    false
