
functions:
  - isLoggedIn():      auth.uid !== null
  - isCurrentUser(id): auth.uid === id
  - undeletable():     next.exists()
  - isSemester(id):    root.semesters[id].exists()
  - isCourse(id):      root.courses[id].exists()
  - isReview(id):      root.reviews[id].exists()

schema:
  type: object
  additionalProperties: false
  properties:

    courses:
      type: object
      $courseId:
        type: object
        additionalProperties: false
        required: [department, foundational, name, number]
        properties:
          department:   {type: string, enum: [CS, CSE]}
          foundational: {type: boolean}
          name:         {type: string}
          number:       {type: number}

    ################

    semesters:
      type: object
      $semesterId:
        type: object
        additionalProperties: false
        required: [season, year]
        properties:
          season: {type: number, minimum: 0, maximum: 3}
          year:   {type: number, minimum: 0}

    ################

    grades:
      type: object
      $gradesCourseId:
        type: object
        additionalProperties: false
        required: [a, b, c, d, f, i, s, u, v, w, total]
        properties:
          a:     {type: number, minimum: 0}
          b:     {type: number, minimum: 0}
          c:     {type: number, minimum: 0}
          d:     {type: number, minimum: 0}
          f:     {type: number, minimum: 0}
          i:     {type: number, minimum: 0}
          s:     {type: number, minimum: 0}
          u:     {type: number, minimum: 0}
          v:     {type: number, minimum: 0}
          w:     {type: number, minimum: 0}
          total: {type: number, minimum: 0}

    ################

    users:
      type: object
      $userId:
        type: object
        additionalProperties: false
        required: [created, authProvider, name, profileImageUrl, anonymous]
        constraint: undeletable()
        properties:
          created:         {type: string}
          updated:         {type: string}
          authProvider:    {type: string, enum: [password, google, facebook, twitter, github]}
          email:           {type: string}
          name:            {type: string}
          profileImageUrl: {type: string}
          anonymous:       {type: boolean}
          specialization:  {type: number, minimum: 0, maximum: 3}

    ################

    reviews:
      type: object
      indexOn: [created, author, course]
      $reviewId:
        type: object
        additionalProperties: false
        required: [created, author, semester, course, difficulty, workload, rating, text]
        properties:
          created:    {type: string}
          updated:    {type: string}
          author:     {type: string}
          semester:   {type: string}
          course:     {type: string}
          difficulty: {type: number, minimum: 1, maximum: 5}
          workload:   {type: number, minimum: 1}
          rating:     {type: number, minimum: 1, maximum: 5}
          text:       {type: string}

    ################

    comments:
      type: object
      indexOn: [author, review]
      $commentId:
        type: object
        additionalProperties: false
        required: [created, author, review, text]
        properties:
          created: {type: string}
          updated: {type: string}
          author:  {type: string}
          review:  {type: string}
          text:    {type: string}

    ################

    aggregations:
      type: object

access:
  - location: /
    read:     false
    write:    false

  # static data maintained by admin
  - location: /courses/
    read:     true
    write:    false
  - location: /semesters/
    read:     true
    write:    false
  - location: /grades/
    read:     true
    write:    false

  # dynamic data maintained by server
  - location: /aggregations/
    read:     true
    write:    false

  # rest
  - location: /users/
    read:     isLoggedIn()
  - location: /users/$userId
    write:    isCurrentUser($userId)

  - location: /reviews/
    read:     true
  - location: /reviews/$reviewId
    write:    (next.exists() && isCurrentUser(next.author)) || (!next.exists() && isCurrentUser(prev.author))

  # not yet implemented
  - location: /comments/
    read:     true
  - location: /comments/$commentId
    write:    (next.exists() && isCurrentUser(next.author)) || (!next.exists() && isCurrentUser(next.author))
